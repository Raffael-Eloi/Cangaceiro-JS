{"version":3,"sources":["../../../app-src/domain/negociacao/NegociacaoService.js"],"names":["HttpService","Negociacao","NegociacaoService","constructor","_http","obterNegociacoesDaSemana","get","then","dados","negociacoes","map","objeto","Date","data","quantidade","valor","err","Error","obterNegociacoesDaSemanaAnterior","obterNegociacoesDaSemanaRetrasada","obtemNegociacoesDoPeriodo","Promise","all","periodo","reduce","novoArray","item","concat","sort","a","b","getTime","catch","console","log"],"mappings":"AAAA,SAASA,WAAT,QAA4B,2BAA5B;AACA,SAASC,UAAT,QAA2B,iBAA3B;AACA,OAAO,MAAMC,iBAAN,CAAwB;AAC7BC,EAAAA,WAAW,GAAG;AACZ,SAAKC,KAAL,GAAa,IAAIJ,WAAJ,EAAb;AACD;;AAEDK,EAAAA,wBAAwB,GAAG;AAEzB,WAAO,KAAKD,KAAL,CAAWE,GAAX,CAAe,oBAAf,EACJC,IADI,CAEHC,KAAK,IAAI;AACP,YAAMC,WAAW,GAAGD,KAAK,CAACE,GAAN,CAClBC,MAAM,IAAI,IAAIV,UAAJ,CAAe,IAAIW,IAAJ,CAASD,MAAM,CAACE,IAAhB,CAAf,EAAsCF,MAAM,CAACG,UAA7C,EAAyDH,MAAM,CAACI,KAAhE,CADQ,CAApB;AAGA,aAAON,WAAP;AACD,KAPE,EAQHO,GAAG,IAAI;AACL,YAAM,IAAIC,KAAJ,CAAU,uCAAV,CAAN;AACD,KAVE,CAAP;AAYD,GAnB4B,CAoB7B;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;;AAGAC,EAAAA,gCAAgC,GAAG;AACjC,WAAO,KAAKd,KAAL,CACNE,GADM,CACF,sBADE,EAENC,IAFM,CAGLC,KAAK,IAAI;AACP,YAAMC,WAAW,GAAGD,KAAK,CAACE,GAAN,CAClBC,MAAM,IAAI,IAAIV,UAAJ,CAAe,IAAIW,IAAJ,CAASD,MAAM,CAACE,IAAhB,CAAf,EAAsCF,MAAM,CAACG,UAA7C,EAAyDH,MAAM,CAACI,KAAhE,CADQ,CAApB;AAEE,aAAON,WAAP;AACH,KAPI,EAQLO,GAAG,IAAI;AACL,YAAM,IAAIC,KAAJ,CAAU,0DAAV,CAAN;AACD,KAVI,CAAP;AAYD;;AAEDE,EAAAA,iCAAiC,GAAG;AAClC,WAAO,KAAKf,KAAL,CACNE,GADM,CACF,uBADE,EAENC,IAFM,CAGLC,KAAK,IAAI;AACP,YAAMC,WAAW,GAAGD,KAAK,CAACE,GAAN,CAClBC,MAAM,IAAI,IAAIV,UAAJ,CAAe,IAAIW,IAAJ,CAASD,MAAM,CAACE,IAAhB,CAAf,EAAsCF,MAAM,CAACG,UAA7C,EAAyDH,MAAM,CAACI,KAAhE,CADQ,CAApB;AAEE,aAAON,WAAP;AACH,KAPI,EAQLO,GAAG,IAAI;AACL,YAAM,IAAIC,KAAJ,CAAU,2DAAV,CAAN;AACD,KAVI,CAAP;AAYD;;AAEDG,EAAAA,yBAAyB,GAAG;AAC1B;AACA,WAAOC,OAAO,CAACC,GAAR,CACL,CACE,KAAKjB,wBAAL,EADF,EAEE,KAAKa,gCAAL,EAFF,EAGE,KAAKC,iCAAL,EAHF,CADK,EAONZ,IAPM,CAOAgB,OAAO,IACZA,OAAO,GAAGA,OAAO,CAACC,MAAR,CACR,CAACC,SAAD,EAAYC,IAAZ,KAAqBD,SAAS,CAACE,MAAV,CAAiBD,IAAjB,EAAuB,EAAvB,CADb,EAERE,IAFQ,CAGR,CAACC,CAAD,EAAIC,CAAJ,KAAUA,CAAC,CAACjB,IAAF,CAAOkB,OAAP,KAAmBF,CAAC,CAAChB,IAAF,CAAOkB,OAAP,EAHrB,CARL,CAaL;AAbK,MAeNC,KAfM,CAgBLhB,GAAG,IAAI;AACLiB,MAAAA,OAAO,CAACC,GAAR,CAAYlB,GAAZ;AACA,YAAM,IAAIC,KAAJ,CAAU,kDAAV,CAAN;AACD,KAnBI,CAAP;AAqBD;;AArH4B","sourcesContent":["import { HttpService } from '../../util/HttpService.js';\r\nimport { Negociacao } from './Negociacao.js';\r\nexport class NegociacaoService {\r\n  constructor() {\r\n    this._http = new HttpService();\r\n  }\r\n\r\n  obterNegociacoesDaSemana() {\r\n    \r\n    return this._http.get('negociacoes/semana')\r\n      .then(\r\n        dados => {\r\n          const negociacoes = dados.map(\r\n            objeto => new Negociacao(new Date(objeto.data), objeto.quantidade, objeto.valor)\r\n          );\r\n          return negociacoes;\r\n        }, \r\n        err => {\r\n          throw new Error('Não foi possível obter as negociações');\r\n        }\r\n      );\r\n  }\r\n  //   ((resolve, reject) => {\r\n      \r\n  //     const xhr = new XMLHttpRequest();\r\n  //     xhr.open('GET', 'negociacoes/semana');\r\n  //     // primeiro parâmetro -> tipo de requisição\r\n  //     // segundo parâmetro  -> endereço/caminho/pah/URL\r\n  \r\n  //     xhr.onreadystatechange = () => {\r\n  //       if (xhr.readyState == 4) {\r\n  //         if (xhr.status == 200) {\r\n  //           console.log('Obtendo as negociações do servidor');\r\n  \r\n  //           const negociacoes = JSON.parse(xhr.responseText)\r\n  //           .map(objeto => new Negociacao(new Date(objeto.data), objeto.quantidade, objeto.valor));\r\n  //           // .forEach(negociacao => this._negociacoes.adiciona(negociacao));\r\n  \r\n  //           // this._mensagem.texto = 'Negociações importadas com sucesso!';\r\n  \r\n  //           // CHAMOU RESOLVE -- OPERAÇÃO CONCLUÍDA, SEM ERRO\r\n  //           resolve(negociacoes);\r\n  \r\n  //         } else {\r\n  //           // console.log(xhr.responseText);\r\n  //           // this._mensagem.texto = 'Não foi possível obter as negociações da semana';\r\n  \r\n  //           // CHAMOU REJECT -- ERRO NA OPERAÇÃO\r\n  //           reject('Não foi possível obter os dados nas negociações');\r\n  //         }\r\n  //       }\r\n  //     };\r\n  \r\n  //     xhr.send(); // Executa a requisição configurada\r\n  \r\n  //     // ESTADOS\r\n  //     // 0: requisição ainda não iniciada; \r\n  //     // 1: conexão com o servidor estabelecida; \r\n  //     // 2: requisição recebida; \r\n  //     // 3: processando requisição; \r\n  //     // 4: requisição está concluída e a resposta está pronta;\r\n  //   })\r\n\r\n  // }\r\n\r\n\r\n  obterNegociacoesDaSemanaAnterior() {\r\n    return this._http\r\n    .get('negociacoes/anterior')\r\n    .then(\r\n      dados => {\r\n        const negociacoes = dados.map(\r\n          objeto => new Negociacao(new Date(objeto.data), objeto.quantidade, objeto.valor));\r\n          return negociacoes;\r\n      },\r\n      err => {\r\n        throw new Error('Não foi possível obter as negociações da semana anterior');\r\n      }\r\n    );\r\n  }\r\n\r\n  obterNegociacoesDaSemanaRetrasada() {\r\n    return this._http\r\n    .get('negociacoes/retrasada')\r\n    .then(\r\n      dados => {\r\n        const negociacoes = dados.map(\r\n          objeto => new Negociacao(new Date(objeto.data), objeto.quantidade, objeto.valor));\r\n          return negociacoes;\r\n      },\r\n      err => {\r\n        throw new Error('Não foi possível obter as negociações da semana retrasada');\r\n      }\r\n    );\r\n  }\r\n\r\n  obtemNegociacoesDoPeriodo() {\r\n    // ACESSA AOS PRÓPRIOS MÉTODOS ATRAVÉS DE THIS\r\n    return Promise.all(\r\n      [\r\n        this.obterNegociacoesDaSemana(),\r\n        this.obterNegociacoesDaSemanaAnterior(),\r\n        this.obterNegociacoesDaSemanaRetrasada()\r\n      ]\r\n    )\r\n    .then( periodo => \r\n      periodo = periodo.reduce(\r\n        (novoArray, item) => novoArray.concat(item, [])\r\n      ).sort(\r\n        (a, b) => b.data.getTime() - a.data.getTime()\r\n      )\r\n      // this._mensagem.texto = 'Negociações importadas com sucesso';\r\n    )\r\n    .catch(\r\n      err => {\r\n        console.log(err);\r\n        throw new Error('Não foi possível obter as negociações do período')\r\n      }\r\n    );\r\n  }\r\n}"],"file":"NegociacaoService.js"}