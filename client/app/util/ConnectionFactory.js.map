{"version":3,"sources":["../../app-src/util/ConnectionFactory.js"],"names":["ConnectionFactory","stores","connection","close","constructor","Error","getConnection","Promise","resolve","reject","openRequest","indexedDB","open","onupgradeneeded","e","_createStores","target","result","onsuccess","bind","onerror","console","log","error","name","forEach","store","objectStoreNames","contains","deleteObjectStore","createObjectStore","autoIncrement","closeConnection"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AAEA,OAAO,MAAMA,iBAAiB,GAAI,MAAO;AACvC,QAAMC,MAAM,GAAG,CAAC,aAAD,CAAf,CADuC,CAGvC;;AACA,MAAIC,UAAU,GAAG,IAAjB,CAJuC,CAMvC;;AACA,MAAIC,KAAK,GAAG,IAAZ,CAPuC,CASvC;;AACA,QAAMH,iBAAN,CAAwB;AACtBI,IAAAA,WAAW,GAAG;AACZ,YAAM,IAAIC,KAAJ,CAAU,8CAAV,CAAN;AACD;;AAEmB,WAAbC,aAAa,GAAG;AACrB,aAAO,IAAIC,OAAJ,CAAa,CAACC,OAAD,EAAUC,MAAV,KAAqB;AACvC,YAAIP,UAAJ,EAAgB,OAAOM,OAAO,CAACN,UAAD,CAAd;AAEhB,cAAMQ,WAAW,GAAGC,SAAS,CAACC,IAAV,CAAe,cAAf,EAA+B,CAA/B,CAApB;;AAEAF,QAAAA,WAAW,CAACG,eAAZ,GAA8BC,CAAC,IAAI;AACjC;AACAd,UAAAA,iBAAiB,CAACe,aAAlB,CAAgCD,CAAC,CAACE,MAAF,CAASC,MAAzC;AACD,SAHD;;AAKAP,QAAAA,WAAW,CAACQ,SAAZ,GAAwBJ,CAAC,IAAI;AAC3B;AACAZ,UAAAA,UAAU,GAAGY,CAAC,CAACE,MAAF,CAASC,MAAtB,CAF2B,CAI3B;;AACAd,UAAAA,KAAK,GAAGD,UAAU,CAACC,KAAX,CAAiBgB,IAAjB,CAAsBjB,UAAtB,CAAR;AAEA;AACV;AACA;AACA;AACA;;AACUA,UAAAA,UAAU,CAACC,KAAX,GAAmB,MAAM;AACvB,kBAAM,IAAIE,KAAJ,CAAU,4CAAV,CAAN;AACD,WAFD,CAZ2B,CAgB3B;;;AACAG,UAAAA,OAAO,CAACN,UAAD,CAAP;AACD,SAlBD;;AAoBAQ,QAAAA,WAAW,CAACU,OAAZ,GAAsBN,CAAC,IAAI;AACzBO,UAAAA,OAAO,CAACC,GAAR,CAAYR,CAAC,CAACE,MAAF,CAASO,KAArB,EADyB,CAEzB;;AACAd,UAAAA,MAAM,CAACK,CAAC,CAACE,MAAF,CAASO,KAAT,CAAeC,IAAhB,CAAN;AACD,SAJD;AAMD,OApCM,CAAP;AAqCD;;AAEmB,WAAbT,aAAa,CAACb,UAAD,EAAa;AAC/BD,MAAAA,MAAM,CAACwB,OAAP,CACEC,KAAK,IAAI;AACP,YAAIxB,UAAU,CAACyB,gBAAX,CAA4BC,QAA5B,CAAqCF,KAArC,CAAJ,EACExB,UAAU,CAAC2B,iBAAX,CAA6BH,KAA7B;AACAxB,QAAAA,UAAU,CAAC4B,iBAAX,CAA6BJ,KAA7B,EAAoC;AAACK,UAAAA,aAAa,EAAE;AAAhB,SAApC;AACH,OALH;AAOD;;AAEqB,WAAfC,eAAe,GAAG;AACvB,UAAI9B,UAAJ,EAAgB;AACdC,QAAAA,KAAK;AACN;AACF;;AA3DqB;AA8DzB,CAxEM,C,CA0EP;AACA;AACA","sourcesContent":["/*\r\n  IIFE (Immediately-invoked function expression)\r\n  funções imediatas\r\n  segue o padrão Module Pattern\r\n*/\r\n\r\nexport const ConnectionFactory = (() =>  {\r\n  const stores = ['negociacoes'];\r\n\r\n  // COMEÇA SEM CONEXÃO\r\n  let connection = null;\r\n\r\n  // VARIÁVEL QUE ARMAZENARÁ A FUNÇÃO ORIGINAL\r\n  let close = null; \r\n\r\n  // RETORNA A DEFINIÇÃO DA CLASSE\r\n  class ConnectionFactory {\r\n    constructor() {\r\n      throw new Error('Não é possível criar instâncias dessa classe');\r\n    }\r\n\r\n    static getConnection() {\r\n      return new Promise( (resolve, reject) => {\r\n        if (connection) return resolve(connection);\r\n\r\n        const openRequest = indexedDB.open('jscangaceiro', 2);\r\n\r\n        openRequest.onupgradeneeded = e => {\r\n          // PASSA A CONEXÃO PARA O MÉTODO\r\n          ConnectionFactory._createStores(e.target.result);\r\n        }\r\n\r\n        openRequest.onsuccess = e => {\r\n          // só será executado na primeira vez que a conexão for criada\r\n          connection = e.target.result;\r\n\r\n          // Guardando a função original\r\n          close = connection.close.bind(connection);\r\n\r\n          /* \r\n            Monkey patch\r\n            Modificamos um método \"nativo\" da API, pois não queremos dar essa opção de fechamanto de conexão ao desenvolvedor (esse fechamento específico)\r\n            Como JS permite alterar funções em tempo de execução, estamos alterando o método close \r\n          */\r\n          connection.close = () => {\r\n            throw new Error('Você não pode fechar diretamente a conexão');\r\n          }\r\n          \r\n          // passa o resultado (conexão) para a promise\r\n          resolve(connection);\r\n        }\r\n\r\n        openRequest.onerror = e => {\r\n          console.log(e.target.error);\r\n          // passa o erro para reject da promise\r\n          reject(e.target.error.name);\r\n        }\r\n\r\n      })\r\n    }\r\n\r\n    static _createStores(connection) {\r\n      stores.forEach(\r\n        store => {\r\n          if (connection.objectStoreNames.contains(store))\r\n            connection.deleteObjectStore(store);\r\n            connection.createObjectStore(store, {autoIncrement: true});\r\n        }\r\n      )\r\n    }\r\n\r\n    static closeConnection() {\r\n      if (connection) {\r\n        close();\r\n      }\r\n    } \r\n  }\r\n  \r\n});\r\n\r\n// a variável vive no escopo global\r\n// porque foi declarada fora da função\r\n// const ConnectionFactory = tmp();\r\n\r\n"],"file":"ConnectionFactory.js"}